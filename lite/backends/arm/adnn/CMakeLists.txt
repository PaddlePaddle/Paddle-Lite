# Copyright (c) 2023 PaddlePaddle Authors. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.0)

PROJECT(ADNN C CXX ASM)
INCLUDE(GNUInstallDirs)

SET(CMAKE_C_STANDARD 99)
SET(CMAKE_C_EXTENSIONS NO)
SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED YES)
SET(CMAKE_CXX_EXTENSIONS NO)

SET(ADNN_LIBRARY_TYPE "default" CACHE STRING "Type of library (shared, static, or default) to build")
SET_PROPERTY(CACHE ADNN_LIBRARY_TYPE PROPERTY STRINGS default static shared)

IF(CMAKE_OSX_ARCHITECTURES)
  LIST(LENGTH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_ARCHITECTURES_COUNT)
  IF(NOT CMAKE_OSX_ARCHITECTURES MATCHES "^(arm64|arm64e|arm64_32)$")
    MESSAGE(FATAL_ERROR "Unsupported CMAKE_OSX_ARCHITECTURES value \"${CMAKE_OSX_ARCHITECTURES}\"")
  ENDIF()
  SET(ADNN_TARGET_PROCESSOR "${CMAKE_OSX_ARCHITECTURES}")
ELSEIF(CMAKE_GENERATOR MATCHES "^Visual Studio " AND CMAKE_GENERATOR_PLATFORM)
  IF(CMAKE_GENERATOR_PLATFORM STREQUAL "ARM64")
    SET(ADNN_TARGET_PROCESSOR "arm64")
  ELSEIF(CMAKE_GENERATOR_PLATFORM STREQUAL "ARM64EC")
    SET(ADNN_TARGET_PROCESSOR "arm64ec")
  ELSE()
    MESSAGE(FATAL_ERROR "Unsupported Visual Studio architecture \"${CMAKE_GENERATOR_PLATFORM}\"")
  ENDIF()
ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]")
  SET(ADNN_TARGET_PROCESSOR "arm")
ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
  SET(ADNN_TARGET_PROCESSOR "arm64")
ELSE()
  MESSAGE(FATAL_ERROR "Unsupported CMAKE_SYSTEM_PROCESSOR value \"${CMAKE_SYSTEM_PROCESSOR}\"")
ENDIF()

IF(NOT CMAKE_SYSTEM_NAME)
  MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_NAME not defined")
ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT|QNX)$")
  MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME value \"${CMAKE_SYSTEM_NAME}\"")
ENDIF()

OPTION(ADNN_WITH_ARM "Build ADNN with Arm CPU" ON)
OPTION(ADNN_ARM_WITH_FP16 "Build ADNN with Arm FP16 kernels" ON)
OPTION(ADNN_ARM_WITH_BF16 "Build ADNN with Arm BF16 kernels" ON)
OPTION(ADNN_ARM_WITH_DOTPROD "Build ADNN with Arm DotProd (integer dot product) kernels" ON)
OPTION(ADNN_ARM_WITH_SVE "Build ADNN with Arm SVE kernels" ON)
OPTION(ADNN_ARM_WITH_SVE2 "Build ADNN with Arm SVE2 kernels" ON)

IF(ADNN_WITH_ARM)
  add_definitions(-DADNN_WITH_ARM)
ENDIF()
IF(ADNN_ARM_WITH_FP16)
  add_definitions(-DADNN_ARM_WITH_FP16)
ENDIF()
IF(ADNN_ARM_WITH_BF16)
  add_definitions(-DADNN_ARM_WITH_BF16)
ENDIF()
IF(ADNN_ARM_WITH_DOTPROD)
  add_definitions(-DADNN_ARM_WITH_DOTPROD)
ENDIF()
IF(ADNN_ARM_WITH_SVE)
  add_definitions(-DADNN_ARM_WITH_SVE)
ENDIF()
IF(ADNN_ARM_WITH_SVE2)
  add_definitions(-DADNN_ARM_WITH_SVE2)
ENDIF()

IF(CMAKE_SYSTEM_NAME MATCHES "Android")
  SET(CMAKE_CXX_FLAGS "-llog ${CMAKE_CXX_FLAGS}")
ENDIF()

include_directories(include)
include_directories(src)

SET(OPERATOR_SRCS 
  src/operators/relu/operator.cc
  src/operators/concat/operator.cc)

SET(KERNEL_SRCS
  src/operators/relu/kernels.cc
  src/operators/concat/kernels.cc)

SET(ARMV7A_NEON_KERNEL_SRCS
  src/operators/relu/codegen/f32_aarch32_neon_x8.cc)

SET(ARMV7A_NEON_VFPV4_KERNEL_SRCS)

SET(ARMV7A_NEON_FP16_KERNEL_SRCS)

SET(ARMV8A_NEON_KERNEL_SRCS
  src/operators/relu/codegen/f32_aarch64_neon_x16.cc)

SET(ARMV82A_FP16_NEON_KERNEL_SRCS)

SET(ARMV82A_BF16_NEON_KERNEL_SRCS)

SET(ARMV82A_DOTPROD_NEON_KERNEL_SRCS)

SET(ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS)

SET(ARMV82A_BF16_DOTPROD_NEON_KERNEL_SRCS)

IF(ADNN_TARGET_PROCESSOR STREQUAL "arm")
  LIST(APPEND KERNEL_SRCS ${ARMV7A_NEON_KERNEL_SRCS})
  LIST(APPEND KERNEL_SRCS ${ARMV7A_NEON_VFPV4_KERNEL_SRCS})
  LIST(APPEND KERNEL_SRCS ${ARMV7A_NEON_FP16_KERNEL_SRCS})
  IF(ADNN_ARM_WITH_FP16)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_FP16_NEON_KERNEL_SRCS})
    IF(ADNN_ARM_WITH_DOTPROD)
      LIST(APPEND KERNEL_SRCS ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS})
    ENDIF()
  ENDIF()
  IF(ADNN_ARM_WITH_BF16)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_BF16_NEON_KERNEL_SRCS})
    IF(ADNN_ARM_WITH_DOTPROD)
      LIST(APPEND KERNEL_SRCS ${ARMV82A_BF16_DOTPROD_NEON_KERNEL_SRCS})
    ENDIF()
  ENDIF()
  IF(ADNN_ARM_WITH_DOTPROD)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_DOTPROD_NEON_KERNEL_SRCS})
  ENDIF()
ENDIF()

IF(ADNN_TARGET_PROCESSOR MATCHES "^arm64")
  LIST(APPEND KERNEL_SRCS ${ARMV8A_NEON_KERNEL_SRCS})
  IF(ADNN_ARM_WITH_FP16)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_FP16_NEON_KERNEL_SRCS})
    IF(ADNN_ARM_WITH_DOTPROD)
      LIST(APPEND KERNEL_SRCS ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS})
    ENDIF()
  ENDIF()
  IF(ADNN_ARM_WITH_BF16)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_BF16_NEON_KERNEL_SRCS})
    IF(ADNN_ARM_WITH_DOTPROD)
      LIST(APPEND KERNEL_SRCS ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS})
    ENDIF()
  ENDIF()
  IF(ADNN_ARM_WITH_DOTPROD)
    LIST(APPEND KERNEL_SRCS ${ARMV82A_DOTPROD_NEON_KERNEL_SRCS})
  ENDIF()
ENDIF()

IF(ADNN_TARGET_PROCESSOR STREQUAL "arm")
  SET_PROPERTY(SOURCE ${KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -marm ")
  SET_PROPERTY(SOURCE ${ARMV7A_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon ")
  SET_PROPERTY(SOURCE ${ARMV7A_NEON_VFPV4_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-vfpv4 ")
  SET_PROPERTY(SOURCE ${ARMV7A_NEON_FP16_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv7-a -mfpu=neon-fp16 ")
  SET_PROPERTY(SOURCE ${ARMV8A_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8-a -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ARMV82A_FP16_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ARMV82A_BF16_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ARMV82A_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16+dotprod -mfpu=neon-fp-armv8 ")
  SET_PROPERTY(SOURCE ${ARMV82A_BF16_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16+dotprod -mfpu=neon-fp-armv8 ")
  IF(ANDROID_NDK_MAJOR AND ANDROID_NDK_MAJOR LESS 21)
    SET_PROPERTY(SOURCE ${KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfloat-abi=softfp ")
  ENDIF()
  IF(CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET_PROPERTY(SOURCE ${ARMV7A_NEON_FP16_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${ARMV82A_FP16_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
    SET_PROPERTY(SOURCE ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -mfp16-format=ieee ")
  ENDIF()
ENDIF()
IF(ADNN_TARGET_PROCESSOR MATCHES "^arm64" AND NOT MSVC)
  SET_PROPERTY(SOURCE ${ARMV82A_FP16_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16 ")
  SET_PROPERTY(SOURCE ${ARMV82A_BF16_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16 ")
  SET_PROPERTY(SOURCE ${ARMV82A_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+dotprod ")
  SET_PROPERTY(SOURCE ${ARMV82A_FP16_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+fp16+dotprod ")
  SET_PROPERTY(SOURCE ${ARMV82A_BF16_DOTPROD_NEON_KERNEL_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS " -march=armv8.2-a+bf16+dotprod ")
ENDIF()

SET(ALL_SRCS 
  src/utilities/logging.cc
  src/utilities/platform.cc
  src/utilities/thread_pool.cc
  src/runtime/device.cc
  src/runtime/context.cc
  ${KERNEL_SRCS}
  ${OPERATOR_SRCS}
  src/adnn.cc)
IF(ADNN_LIBRARY_TYPE STREQUAL "default")
  ADD_LIBRARY(adnn ${ALL_SRCS})
ELSEIF(ADNN_LIBRARY_TYPE STREQUAL "shared")
  ADD_LIBRARY(adnn SHARED ${ALL_SRCS})
ELSEIF(ADNN_LIBRARY_TYPE STREQUAL "static")
  ADD_LIBRARY(adnn STATIC ${ALL_SRCS})
ELSE()
  MESSAGE(FATAL_ERROR "Unsupported library type \"${ADNN_LIBRARY_TYPE}\", should be \"static\", \"shared\", or \"default\".")
ENDIF()

INSTALL(TARGETS adnn
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
