from setuptools import setup, Distribution
import shutil
import os


class BinaryDistribution(Distribution):
    def has_ext_modules(foo):
        return True


# get paddle-lite version, if it's not based on a release tag, we use commit id instead
paddlelite_commit = "@PADDLE_LITE_COMMIT@"
paddlelite_tag = "@PADDLE_LITE_TAG@"
if paddlelite_tag == "":
    paddlelite_version = paddlelite_commit
else:
    paddlelite_version = paddlelite_tag

lite_path='${PADDLE_BINARY_DIR}/inference_lite_lib/python/install/lite'
package_data = {'lite': ['lite_core.so']}
# put all thirdparty libraries in paddle.libs
package_data['libs']= []
libs_path='${PADDLE_BINARY_DIR}/inference_lite_lib/python/install/libs'
if '${WITH_MKL}' == 'ON':
    shutil.copy('${MKLML_SHARED_IOMP_LIB}', libs_path)
    shutil.copy('${MKLML_SHARED_LIB}', libs_path)
    package_data['libs'] += ['libmklml_intel.so', 'libiomp5.so']

command = "patchelf --set-rpath '$ORIGIN/../libs/' ${PADDLE_BINARY_DIR}/inference_lite_lib/python/install/lite/lite_core.so"
if os.system(command) != 0:
    raise Exception("patch third_party libs failed, command: %s" % command)

# remove unused paddle/libs/__init__.py
if os.path.isfile(libs_path+'/__init__.py'):
    os.remove(libs_path+'/__init__.py')


package_dir={
    # The paddle.fluid.proto will be generated while compiling.
    # So that package points to other directory.
    'libs': libs_path,
    'lite': lite_path
}


setup(
    name = 'paddlelite',
    version = paddlelite_version,
    description = 'Paddle-Lite Library',
    packages = ['lite','libs'],
    package_dir = package_dir,
    package_data = package_data,
    distclass = BinaryDistribution
)
