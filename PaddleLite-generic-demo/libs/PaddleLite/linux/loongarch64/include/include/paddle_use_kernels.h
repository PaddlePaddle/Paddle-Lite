#pragma once
#include "paddle_lite_factory_helper.h"

USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(unfold, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(unfold, kHost, kInt8, kNCHW, def_int8);
USE_LITE_KERNEL(print, kHost, kAny, kAny, def);
USE_LITE_KERNEL(cos, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_add, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(fc, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(fc, kOpenCL, kFP16, kNCHW, pc);
USE_LITE_KERNEL(unique, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unique, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(unique, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageDefault, NCHW_to_ImageDefault);
USE_LITE_KERNEL(layout_once, kOpenCL, kAny, kImageDefault, NCHW_to_ImageDefault);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, ImageDefault_to_NCHW);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageFolder, NCHW_to_ImageFolder);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(layout_once, kOpenCL, kAny, kNCHW, ImageDefault_to_NCHW);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageFolder, ImageDefault_to_ImageFolder);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kImageDefault, ImageFolder_to_ImageDefault);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, ImageFolder_to_NCHW);
USE_LITE_KERNEL(layout, kOpenCL, kAny, kNCHW, ImageFolder_to_Any);
USE_LITE_KERNEL(concat, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(prior_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kInt32, kNCHW, def);
USE_LITE_KERNEL(slice, kOpenCL, kInt64, kNCHW, def);
USE_LITE_KERNEL(shape, kOpenCL, kAny, kAny, def);
USE_LITE_KERNEL(one_hot, kHost, kAny, kAny, def);
USE_LITE_KERNEL(one_hot_v2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(one_hot_v2, kHost, kAny, kAny, one_hot_v2_int32);
USE_LITE_KERNEL(im2sequence, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(io_copy, kOpenCL, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy, kOpenCL, kAny, kAny, device_to_host);
USE_LITE_KERNEL(io_copy_once, kOpenCL, kAny, kAny, host_to_device);
USE_LITE_KERNEL(io_copy_once, kOpenCL, kAny, kAny, device_to_host);
USE_LITE_KERNEL(cast, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(strided_slice, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(pad, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(pad, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(pad, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(conv2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(depthwise_conv2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(conv2d, kOpenCL, kFP16, kImageDefault, image2d_pc);
USE_LITE_KERNEL(depthwise_conv2d, kOpenCL, kFP16, kImageDefault, image2d_pc);
USE_LITE_KERNEL(arg_max, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(matmul, kOpenCL, kFP16, kImageFolder, image2d_host);
USE_LITE_KERNEL(matmul, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFP16, kImageFolder, image2d_host);
USE_LITE_KERNEL(ctc_align, kHost, kInt64, kNCHW, def);
USE_LITE_KERNEL(ctc_align, kHost, kInt32, kNCHW, def);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(range, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(range, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(range, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(tensor_array_to_tensor, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu_clipped, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(prelu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(tanh, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(swish, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(relu6, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(log, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(log1p, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(exp, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(floor, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(ceil, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_sigmoid, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(rsqrt, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(square, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(hard_swish, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reciprocal, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(abs, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(thresholded_relu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(elu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(softplus, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(silu, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(leaky_relu, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(swish, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(exp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(tanh, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(relu, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(abs, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(relu6, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(sigmoid, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(hard_sigmoid, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(hard_swish, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(gelu, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(prelu, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sqrt, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(rsqrt, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(square, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(log, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(density_prior_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(squeeze, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(squeeze2, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(unsqueeze, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(unsqueeze2, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(select_input, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(reduce_max, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(max, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(equal, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(equal, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(not_equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(less_than, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(less_than, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(less_equal, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(less_equal, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_bool);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(greater_than, kHost, kInt64, kAny, def);
USE_LITE_KERNEL(greater_than, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(greater_equal, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(distribute_fpn_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_fp32);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_int32);
USE_LITE_KERNEL(argsort, kHost, kFloat, kAny, argsort_int64);
USE_LITE_KERNEL(collect_fpn_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_mask, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(sin, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(roi_align, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sin, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(cos, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(tan, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(atan, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(asin, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(acos, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(split, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(crop_tensor, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(crop_tensor, kHost, kFloat, kAny, int32_precision);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int32int32);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int64int64);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int64int32);
USE_LITE_KERNEL(gather, kHost, kFloat, kNCHW, int32int64);
USE_LITE_KERNEL(round, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(layer_norm, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(while, kHost, kAny, kAny, def);
USE_LITE_KERNEL(uniform_random, kHost, kAny, kAny, def);
USE_LITE_KERNEL(pad2d, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(conditional_block, kHost, kAny, kAny, def);
USE_LITE_KERNEL(log_softmax, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(merge_lod_tensor, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(flip, kHost, kAny, kNCHW, flip_fp32);
USE_LITE_KERNEL(flip, kHost, kAny, kNCHW, flip_i64);
USE_LITE_KERNEL(reduce_mean, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, int32_def);
USE_LITE_KERNEL(stack, kHost, kFloat, kAny, int64_def);
USE_LITE_KERNEL(unbind, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unbind, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(sequence_softmax, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(lrn, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(max_pool2d_with_index, kHost, kFloat, kNCHW, fp32);
USE_LITE_KERNEL(pow, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(where_index, kHost, kAny, kAny, def);
USE_LITE_KERNEL(greater_than, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(concat, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(cumsum, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(meshgrid, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(meshgrid, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(meshgrid, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(generate_proposals_v2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(batch_norm, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sync_batch_norm, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, int16);
USE_LITE_KERNEL(arg_max, kHost, kAny, kNCHW, uint8);
USE_LITE_KERNEL(yolo_box, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(unsqueeze, kHost, kAny, kAny, def);
USE_LITE_KERNEL(unsqueeze2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(conv2d_transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(depthwise_conv2d_transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(lod_array_length, kHost, kAny, kAny, def);
USE_LITE_KERNEL(fc, kOpenCL, kFP16, kImageFolder, image2d);
USE_LITE_KERNEL(roll, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(is_empty, kHost, kAny, kAny, def);
USE_LITE_KERNEL(fill_any_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(fill_zeros_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(box_coder, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(matrix_nms, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(roi_perspective_transform, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(share_data, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(top_k_v2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_all, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reduce_any, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(dropout, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(softmax, kOpenCL, kFP16, kImageFolder, def);
USE_LITE_KERNEL(gaussian_random, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(reshape, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(reshape2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(flatten, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(flatten2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(set_value, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(set_value, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(set_value, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(set_value, kHost, kAny, kNCHW, bool);
USE_LITE_KERNEL(set_value, kHost, kAny, kNCHW, double);
USE_LITE_KERNEL(linspace, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(linspace, kHost, kInt32, kAny, int32);
USE_LITE_KERNEL(sampling_id, kHost, kAny, kAny, float32);
USE_LITE_KERNEL(deformable_conv, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms2, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(multiclass_nms3, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(increment, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(bilinear_interp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(bilinear_interp_v2, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(retinanet_detection_output, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(logical_xor, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_and, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_or, kHost, kAny, kAny, def);
USE_LITE_KERNEL(logical_not, kHost, kAny, kAny, def);
USE_LITE_KERNEL(write_to_array, kHost, kAny, kAny, def);
USE_LITE_KERNEL(reverse, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(reverse, kHost, kAny, kNCHW, def_tensor_array);
USE_LITE_KERNEL(reverse, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(reshape, kHost, kAny, kAny, def);
USE_LITE_KERNEL(reshape2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(flatten, kHost, kAny, kAny, def);
USE_LITE_KERNEL(flatten2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(empty, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_float);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int32);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int64);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_int8);
USE_LITE_KERNEL(tile, kHost, kFloat, kNCHW, def_bool);
USE_LITE_KERNEL(yolo_box, kOpenCL, kAny, kNCHW, def);
USE_LITE_KERNEL(unstack, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(unstack, kHost, kFloat, kAny, unstack_int32);
USE_LITE_KERNEL(anchor_generator, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(beam_search, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(softmax, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(pad2d, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(layer_norm, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(fill_constant, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(instance_norm, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, float32_int64);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int32_int32);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int32_int64);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int64_int32);
USE_LITE_KERNEL(scatter_nd_add, kHost, kFloat, kNCHW, int64_int64);
USE_LITE_KERNEL(cos_sim, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(scale, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(expand, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(nearest_interp, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(nearest_interp_v2, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(gather_nd, kHost, kAny, kAny, def);
USE_LITE_KERNEL(shuffle_channel, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(scale, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_expand, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(box_clip, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(assign, kHost, kAny, kAny, def);
USE_LITE_KERNEL(assign, kHost, kAny, kAny, def_tensor_array);
USE_LITE_KERNEL(pixel_shuffle, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(fill_constant_batch_size_like, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(reshape, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(reshape2, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(flatten, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(flatten2, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, float32);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(fill_zeros_like, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(fetch, kHost, kAny, kAny, def);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(split, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(split, kHost, kInt64, kNCHW, def);
USE_LITE_KERNEL(gather, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(beam_search_decode, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(pixel_shuffle, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(transpose, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(transpose2, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(top_k, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(elementwise_div, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_add, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_sub, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_mul, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_max, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_min, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_pow, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_mod, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_add_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_sub_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_mul_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(fusion_elementwise_div_activation, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(elementwise_floordiv, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(norm, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(p_norm, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_unpad, kHost, kFloat, kAny, float32);
USE_LITE_KERNEL(sequence_unpad, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(relu, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(sigmoid, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(gelu, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(relu6, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(tanh, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(generate_proposals, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(pool2d, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(temporal_shift, kHost, kFloat, kNCHW, fp32);
USE_LITE_KERNEL(flatten_contiguous_range, kHost, kAny, kAny, def);
USE_LITE_KERNEL(correlation, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(feed, kHost, kAny, kAny, def);
USE_LITE_KERNEL(matmul, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(matmul_v2, kOpenCL, kFloat, kNCHW, def);
USE_LITE_KERNEL(squeeze, kHost, kAny, kAny, def);
USE_LITE_KERNEL(squeeze2, kHost, kAny, kAny, def);
USE_LITE_KERNEL(shuffle_channel, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(polygon_box_transform, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(grid_sampler, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(crop, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(crop, kHost, kInt32, kAny, def);
USE_LITE_KERNEL(read_from_array, kHost, kAny, kAny, def);
USE_LITE_KERNEL(clip, kOpenCL, kFP16, kImageDefault, def);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, fp32);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int16);
USE_LITE_KERNEL(index_select, kHost, kAny, kNCHW, int8);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, int32);
USE_LITE_KERNEL(sequence_pad, kHost, kFloat, kNCHW, int64);
USE_LITE_KERNEL(lod_reset, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(assign_value, kHost, kAny, kNCHW, def);
USE_LITE_KERNEL(expand_as, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(expand_as, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(tril_triu, kHost, kAny, kNCHW, float32);
USE_LITE_KERNEL(unique_with_counts, kHost, kAny, kAny, def);
USE_LITE_KERNEL(bitwise_and, kHost, kAny, kNCHW, bl);
USE_LITE_KERNEL(bitwise_and, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(bitwise_and, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(bitwise_not, kHost, kAny, kNCHW, bl);
USE_LITE_KERNEL(bitwise_not, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(bitwise_not, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(bitwise_xor, kHost, kAny, kNCHW, bl);
USE_LITE_KERNEL(bitwise_xor, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(bitwise_xor, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(bitwise_or, kHost, kAny, kNCHW, bl);
USE_LITE_KERNEL(bitwise_or, kHost, kAny, kNCHW, int32);
USE_LITE_KERNEL(bitwise_or, kHost, kAny, kNCHW, int64);
USE_LITE_KERNEL(pool2d, kOpenCL, kFP16, kNCHW, def);
USE_LITE_KERNEL(shape, kHost, kAny, kAny, def);
USE_LITE_KERNEL(where, kHost, kAny, kAny, def);
USE_LITE_KERNEL(transpose, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(transpose2, kOpenCL, kFP16, kImageDefault, image2d);
USE_LITE_KERNEL(pad3d, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(expand, kHost, kAny, kAny, def);
USE_LITE_KERNEL(crf_decoding, kHost, kFloat, kNCHW, def);
USE_LITE_KERNEL(gather_tree, kHost, kFloat, kAny, int32);
USE_LITE_KERNEL(gather_tree, kHost, kFloat, kAny, int64);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def_bool);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def_int32);
USE_LITE_KERNEL(expand_v2, kHost, kFloat, kAny, def_int64);
USE_LITE_KERNEL(write_back, kHost, kAny, kAny, write_back);
USE_LITE_KERNEL(box_coder, kOpenCL, kFP16, kImageDefault, ImageDefault);
USE_LITE_KERNEL(inverse, kHost, kFloat, kNCHW, fp32);